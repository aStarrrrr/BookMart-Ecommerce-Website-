@model BookMart.Models.ViewModels.AdminOrdersViewModel

@{
    ViewData["Title"] = "Manage Orders";
    Layout = "~/Views/Shared/adminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Order Stats -->
    <div class="row g-3 mb-3">
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-shopping-cart"></i></div>
                <div>
                    <div class="text-muted small mb-1">Total Orders</div>
                    <div class="fw-bold fs-5">@Model.Stats.TotalOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-clock"></i></div>
                <div>
                    <div class="text-muted small mb-1">Pending</div>
                    <div class="fw-bold fs-5">@Model.Stats.PendingOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-cog"></i></div>
                <div>
                    <div class="text-muted small mb-1">Processing</div>
                    <div class="fw-bold fs-5">@Model.Stats.ProcessingOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-shipping-fast"></i></div>
                <div>
                    <div class="text-muted small mb-1">Shipped</div>
                    <div class="fw-bold fs-5">@Model.Stats.ShippedOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-check-circle"></i></div>
                <div>
                    <div class="text-muted small mb-1">Delivered</div>
                    <div class="fw-bold fs-5">@Model.Stats.DeliveredOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4 col-xl-2">
            <div class="card d-flex flex-row align-items-center">
                <div class="sidebar-user-avatar me-3"><i class="fas fa-times-circle"></i></div>
                <div>
                    <div class="text-muted small mb-1">Cancelled</div>
                    <div class="fw-bold fs-5">@Model.Stats.CancelledOrders.ToString("N0")</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Orders Table Section -->
    <div class="card">
        <div class="card-header">
            <div class="row g-3 align-items-center">
                <div class="col-12 col-sm-6 col-lg-4">
                    <form id="searchForm" method="get" class="d-flex">
                        <input type="text" name="searchQuery" class="form-control" placeholder="Search orders..."
                               value="@Model.Filter.SearchQuery">
                        <button type="submit" class="btn btn-outline ms-2">
                            <i class="fas fa-search"></i>
                        </button>
                    </form>
                </div>
                <div class="col-12 col-sm-6 col-lg-8">
                    <div class="d-flex flex-wrap gap-2 justify-content-sm-end">
                        <select id="statusFilter" name="statusFilter" class="form-select w-auto" 
                                asp-items="@(new SelectList(new[]
                                {
                                    new { Value = "", Text = "All Status" },
                                    new { Value = "Pending", Text = "Pending" },
                                    new { Value = "Processing", Text = "Processing" },
                                    new { Value = "Shipped", Text = "Shipped" },
                                    new { Value = "Delivered", Text = "Delivered" },
                                    new { Value = "Cancelled", Text = "Cancelled" }
                                }, "Value", "Text", Model.Filter.StatusFilter))"
                                onchange="document.getElementById('searchForm').submit()">
                        </select>
                        <input type="date" name="startDate" class="form-control w-auto" 
                               value="@(Model.Filter.StartDate?.ToString("yyyy-MM-dd"))"
                               onchange="document.getElementById('searchForm').submit()">
                        <input type="date" name="endDate" class="form-control w-auto" 
                               value="@(Model.Filter.EndDate?.ToString("yyyy-MM-dd"))"
                               onchange="document.getElementById('searchForm').submit()">
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Items</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model.Orders)
                    {
                        <tr>
                            <td>#@order.OrderID</td>
                            <td>
                                <div>@($"{order.ShippingFirstName} {order.ShippingLastName}")</div>
                                <small class="text-muted">@order.ShippingEmail</small>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    @{
                                        var displayedItems = order.OrderItems?.Take(2).ToList();
                                        int remainingItems = (order.OrderItems?.Count ?? 0) - 2;
                                    }
                                    @if (displayedItems != null)
                                    {
                                        foreach (var item in displayedItems)
                                        {
                                            <img src="@item.Book?.CoverImageURL" alt="@item.Book?.Title" 
                                                 class="rounded shadow-sm me-1" 
                                                 style="width: 32px; height: 48px; object-fit: cover;">
                                        }
                                    }
                                    @if (remainingItems > 0)
                                    {
                                        <span class="badge badge">+@remainingItems</span>
                                    }
                                </div>
                            </td>
                            <td>₹@order.TotalAmount.ToString("N2")</td>
                            <td>
                                <select class="form-select form-select-sm status-select" 
                                        data-order-id="@order.OrderID"
                                        asp-items="@(new SelectList(new[]
                                        {
                                            new { Value = "Pending", Text = "Pending" },
                                            new { Value = "Processing", Text = "Processing" },
                                            new { Value = "Shipped", Text = "Shipped" },
                                            new { Value = "Delivered", Text = "Delivered" },
                                            new { Value = "Cancelled", Text = "Cancelled" }
                                        }, "Value", "Text", order.OrderStatus))"
                                        style="width: auto;">
                                </select>
                            </td>
                            <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button type="button" class="btn btn-outline btn-sm view-details-btn"
                                        data-bs-toggle="modal" data-bs-target="#orderDetailsModal"
                                        data-order-id="@order.OrderID"
                                        data-order-details="@Html.Raw(Json.Serialize(order))">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <nav>
                <ul class="pagination justify-content-end mb-0">
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Orders", "Admin", new { page = i, statusFilter = Model.Filter.StatusFilter, searchQuery = Model.Filter.SearchQuery, startDate = Model.Filter.StartDate?.ToString("yyyy-MM-dd"), endDate = Model.Filter.EndDate?.ToString("yyyy-MM-dd") })">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6 mb-4">
                        <h6 class="text-muted mb-3">Shipping Information</h6>
                        <div id="shippingDetails"></div>
                    </div>
                    <div class="col-md-6 mb-4">
                        <h6 class="text-muted mb-3">Order Summary</h6>
                        <div id="orderSummary"></div>
                    </div>
                    <div class="col-12">
                        <h6 class="text-muted mb-3">Order Items</h6>
                        <div id="orderItems" class="table-responsive"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle status changes
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', async function() {
                const orderId = this.dataset.orderId;
                const newStatus = this.value;
                
                try {
                    const response = await fetch('@Url.Action("UpdateOrderStatus", "Admin")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ orderId, newStatus })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        // Show success toast or update UI
                        alert(result.message);
                    } else {
                        throw new Error(result.message);
                    }
                } catch (error) {
                    console.error('Error updating order status:', error);
                    alert('Error updating order status. Please try again.');
                    // Reset select to previous value
                    this.value = this.getAttribute('data-original-value');
                }
            });
            
            // Store original value for reverting on error
            select.setAttribute('data-original-value', select.value);
        });

        // Handle order details modal
        document.querySelectorAll('.view-details-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const orderData = JSON.parse(this.dataset.orderDetails);
                
                // Update shipping details
                document.getElementById('shippingDetails').innerHTML = `
                    <div class="mb-2">
                        <strong>${orderData.shippingFirstName} ${orderData.shippingLastName}</strong>
                    </div>
                    <div class="mb-2">${orderData.shippingAddressLine1}</div>
                    ${orderData.shippingAddressLine2 ? `<div class="mb-2">${orderData.shippingAddressLine2}</div>` : ''}
                    <div class="mb-2">${orderData.shippingCity}, ${orderData.shippingState} ${orderData.shippingPinCode}</div>
                    <div class="mb-2">
                        <i class="fas fa-phone me-2"></i>${orderData.shippingPhone}
                    </div>
                    <div class="mb-2">
                        <i class="fas fa-envelope me-2"></i>${orderData.shippingEmail}
                    </div>
                `;
                
                // Update order summary
                document.getElementById('orderSummary').innerHTML = `
                    <div class="d-flex justify-content-between mb-2">
                        <span>Order ID:</span>
                        <strong>#${orderData.orderID}</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Order Date:</span>
                        <strong>${new Date(orderData.orderDate).toLocaleDateString()}</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Status:</span>
                        <strong>${orderData.orderStatus}</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Amount:</span>
                        <strong>₹${orderData.totalAmount.toFixed(2)}</strong>
                    </div>
                `;
                
                // Update order items
                let itemsHtml = `
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Book</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th class="text-end">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                orderData.orderItems.forEach(item => {
                    itemsHtml += `
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img src="${item.book.coverImageURL}" alt="${item.book.title}"
                                         class="rounded shadow-sm me-2"
                                         style="width: 40px; height: 60px; object-fit: cover;">
                                    <div>
                                        <div class="fw-medium">${item.book.title}</div>
                                        <small class="text-muted">by ${item.book.author}</small>
                                    </div>
                                </div>
                            </td>
                            <td>₹${item.price.toFixed(2)}</td>
                            <td>${item.quantity}</td>
                            <td class="text-end">₹${(item.price * item.quantity).toFixed(2)}</td>
                        </tr>
                    `;
                });
                
                itemsHtml += '</tbody></table>';
                document.getElementById('orderItems').innerHTML = itemsHtml;
            });
        });
    </script>
}
