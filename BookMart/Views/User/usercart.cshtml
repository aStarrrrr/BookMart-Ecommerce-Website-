@model List<BookMart.Models.CartItem>

@{
    ViewData["Title"] = "My Cart";
    Layout = "userCommonLayout";

    decimal grandTotal = 0;
    decimal taxRate = 0.05M;
}

<link href="~/css/user.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center pb-4">
                <i class="fas fa-exclamation-circle text-warning display-4 mb-4"></i>
                <h4 class="modal-title mb-3">Remove Book from Cart?</h4>
                <p class="text-muted">Are you sure you want to remove <span id="bookTitleSpan"></span> from your cart?</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-outline-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger px-4" id="confirmDelete">Remove</button>
            </div>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="container mt-5 pt-5 cart-page">
    <!-- Checkout Steps -->
    <div class="checkout-steps mb-5">
        <div class="step active">1</div>
        <div class="step">2</div>
        <div class="step">3</div>
        <div class="step">4</div>
    </div>

    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Shopping Cart</h4>
        <a href="@Url.Action("UserHome", "User")" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i>Continue Shopping
        </a>
    </div>

    <div class="row">
        <!-- Cart Items -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-shopping-cart me-2"></i>Cart Items (@(Model?.Count() ?? 0))
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            if (item.Book != null)
                            {
                                decimal itemTotal = item.Quantity * item.Price;
                                grandTotal += itemTotal;

                                <div class="cart-item row align-items-center">
                                    <div class="col-md-2">
                                        <img src="@item.Book.CoverImageURL" class="img-fluid rounded" alt="@item.Book.Title">
                                    </div>
                                    <div class="col-md-4">
                                        <h5 class="mb-1">@item.Book.Title</h5>
                                        <p class="mb-0 text-muted">by @item.Book.Author</p>
                                        <small class="text-muted">@item.Book.Genre?.Name</small>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="input-group input-group-sm">
                                            <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(@item.BookID, -1)">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="number" class="form-control text-center" value="@item.Quantity" readonly>
                                            <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(@item.BookID, 1)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-2 text-end">
                                        <span class="h5 mb-0">₹@item.Price.ToString("F0")</span>
                                    </div>
                                    <div class="col-md-2 text-end">
                                        <button class="btn btn-link text-danger" onclick="removeItem(@item.BookID, '@item.Book.Title')">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                            <h5>Your cart is empty</h5>
                            <p class="text-muted">Browse our collection and add some books to your cart!</p>
                            <a href="@Url.Action("UserHome", "User")" class="btn btn-primary mt-3">
                                Start Shopping
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <span>Subtotal</span>
                        <span>₹@grandTotal.ToString("F0")</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Shipping</span>
                        <span class="text-success">Free</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Tax (@(taxRate * 100)%)</span>
                        <span>₹@((int)Math.Ceiling(grandTotal * taxRate))</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-4">
                        <strong>Total</strong>
                        <strong>₹@((int)Math.Ceiling(grandTotal + Math.Ceiling(grandTotal * taxRate)))</strong>
                    </div>

                    @if (Model != null && Model.Any())
                    {
                        <a href="@Url.Action("UserCheckout", "User")" class="btn btn-primary w-100">
                            <i class="fas fa-lock me-2"></i>Proceed to Checkout
                        </a>
                    }
                    else
                    {
                        <button class="btn btn-primary w-100" disabled>
                            <i class="fas fa-lock me-2"></i>Proceed to Checkout
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const successMessage = '@TempData["SuccessMessage"]';
            const errorMessage = '@TempData["ErrorMessage"]';
            if (successMessage && successMessage !== '') {
                console.log("Success: " + successMessage);
            }
            if (errorMessage && errorMessage !== '') {
                console.log("Error: " + errorMessage);
            }
        });

        function updateQuantity(bookId, change) {
            var antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            fetch('/User/UpdateCartItemQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                },
                body: JSON.stringify({ bookId: bookId, quantityChange: change })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                alert('An error occurred while updating quantity.');
            });
        }

        let bookIdToDelete = null;
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));

        function removeItem(bookId, bookTitle) {
            bookIdToDelete = bookId;
            document.getElementById('bookTitleSpan').textContent = bookTitle;
            deleteModal.show();
        }

        document.getElementById('confirmDelete').addEventListener('click', function() {
            if (bookIdToDelete) {
                var antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                fetch('/User/RemoveCartItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify({ bookId: bookIdToDelete })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                    deleteModal.hide();
                })
                .catch(error => {
                    console.error('Error removing item:', error);
                    alert('An error occurred while removing the item.');
                    deleteModal.hide();
                });
            }
        });
    </script>
}

<style>
.card, .info-card {
    border-radius: 1.25rem;
    box-shadow: 0 2px 16px 0 rgba(0,0,0,0.08);
    transition: box-shadow 0.3s cubic-bezier(.4,0,.2,1), transform 0.2s cubic-bezier(.4,0,.2,1);
    background: #fff;
    border: 1px solid #e5e5e5;
}
.card:hover, .info-card:hover {
    box-shadow: 0 8px 32px 0 rgba(0,0,0,0.16);
    transform: translateY(-2px) scale(1.02);
}
.btn, .btn-primary, .btn-outline-primary {
    border-radius: 1.5rem !important;
    font-weight: 500;
    transition: background 0.2s, color 0.2s, box-shadow 0.2s;
    box-shadow: 0 1px 4px 0 rgba(0,0,0,0.04);
}
.btn-primary {
    background: #111;
    color: #fff;
    border: none;
}
.btn-primary:hover, .btn-primary:focus {
    background: #222;
    color: #fff;
}
.btn-outline-primary {
    color: #111;
    border: 2px solid #111;
    background: #fff;
}
.btn-outline-primary:hover, .btn-outline-primary:focus {
    background: #111;
    color: #fff;
}
</style>
